$token: aws:ecs/service:Service
properties:
  capacityProviderStrategies:
    type: array
    items:
      $ref: "#/types/aws:ecs/ServiceCapacityProviderStrategy:ServiceCapacityProviderStrategy"
    description: |
      Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `force_new_deployment = true` and not changing from 0 `capacity_provider_strategy` blocks to greater than 0, or vice versa. See below.
  cluster:
    type: string
    description: |
      ARN of an ECS cluster.
  deploymentCircuitBreaker:
    $ref: "#/types/aws:ecs/ServiceDeploymentCircuitBreaker:ServiceDeploymentCircuitBreaker"
    description: |
      Configuration block for deployment circuit breaker. See below.
  deploymentController:
    $ref: "#/types/aws:ecs/ServiceDeploymentController:ServiceDeploymentController"
    description: |
      Configuration block for deployment controller configuration. See below.
  deploymentMaximumPercent:
    type: integer
    description: |
      Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
  deploymentMinimumHealthyPercent:
    type: integer
    description: |
      Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
  desiredCount:
    type: integer
    description: |
      Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
  enableEcsManagedTags:
    type: boolean
    description: |
      Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
  enableExecuteCommand:
    type: boolean
    description: |
      Specifies whether to enable Amazon ECS Exec for the tasks within the service.
  forceNewDeployment:
    type: boolean
    description: |
      Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `ordered_placement_strategy` and `placement_constraints` updates.
  healthCheckGracePeriodSeconds:
    type: integer
    description: |
      Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
  iamRole:
    type: string
    description: |
      ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
  launchType:
    type: string
    description: |
      Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
  loadBalancers:
    type: array
    items:
      $ref: "#/types/aws:ecs/ServiceLoadBalancer:ServiceLoadBalancer"
    description: |
      Configuration block for load balancers. See below.
  name:
    type: string
    description: |
      Name of the service (up to 255 letters, numbers, hyphens, and underscores)
  networkConfiguration:
    $ref: "#/types/aws:ecs/ServiceNetworkConfiguration:ServiceNetworkConfiguration"
    description: |
      Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
  orderedPlacementStrategies:
    type: array
    items:
      $ref: "#/types/aws:ecs/ServiceOrderedPlacementStrategy:ServiceOrderedPlacementStrategy"
    description: |
      Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `force_new_deployment` is enabled. The maximum number of `ordered_placement_strategy` blocks is `5`. See below.
  placementConstraints:
    type: array
    items:
      $ref: "#/types/aws:ecs/ServicePlacementConstraint:ServicePlacementConstraint"
    description: |
      Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `force_new_deployment` is enabled. Maximum number of `placement_constraints` is `10`. See below.
  platformVersion:
    type: string
    description: |
      Platform version on which to run your service. Only applicable for `launch_type` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
  propagateTags:
    type: string
    description: |
      Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
  schedulingStrategy:
    type: string
    description: |
      Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
  serviceRegistries:
    $ref: "#/types/aws:ecs/ServiceServiceRegistries:ServiceServiceRegistries"
    description: |
      Service discovery registries for the service. The maximum number of `service_registries` blocks is `1`. See below.
  tags:
    type: object
    additionalProperties:
      type: string
    description: |
      Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
  tagsAll:
    type: object
    additionalProperties:
      type: string
    description: |
      A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
  taskDefinition:
    type: string
    description: |
      Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
  waitForSteadyState:
    type: boolean
    description: |
      If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
required:
  - cluster
  - iamRole
  - launchType
  - name
  - platformVersion
  - tagsAll
inputProperties:
  capacityProviderStrategies:
    type: array
    items:
      $ref: "#/types/aws:ecs/ServiceCapacityProviderStrategy:ServiceCapacityProviderStrategy"
    description: |
      Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `force_new_deployment = true` and not changing from 0 `capacity_provider_strategy` blocks to greater than 0, or vice versa. See below.
  cluster:
    type: string
    description: |
      ARN of an ECS cluster.
    willReplaceOnChanges: true
  deploymentCircuitBreaker:
    $ref: "#/types/aws:ecs/ServiceDeploymentCircuitBreaker:ServiceDeploymentCircuitBreaker"
    description: |
      Configuration block for deployment circuit breaker. See below.
  deploymentController:
    $ref: "#/types/aws:ecs/ServiceDeploymentController:ServiceDeploymentController"
    description: |
      Configuration block for deployment controller configuration. See below.
  deploymentMaximumPercent:
    type: integer
    description: |
      Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
  deploymentMinimumHealthyPercent:
    type: integer
    description: |
      Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
  desiredCount:
    type: integer
    description: |
      Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
  enableEcsManagedTags:
    type: boolean
    description: |
      Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
  enableExecuteCommand:
    type: boolean
    description: |
      Specifies whether to enable Amazon ECS Exec for the tasks within the service.
  forceNewDeployment:
    type: boolean
    description: |
      Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `ordered_placement_strategy` and `placement_constraints` updates.
  healthCheckGracePeriodSeconds:
    type: integer
    description: |
      Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
  iamRole:
    type: string
    description: |
      ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
    willReplaceOnChanges: true
  launchType:
    type: string
    description: |
      Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
    willReplaceOnChanges: true
  loadBalancers:
    type: array
    items:
      $ref: "#/types/aws:ecs/ServiceLoadBalancer:ServiceLoadBalancer"
    description: |
      Configuration block for load balancers. See below.
  name:
    type: string
    description: |
      Name of the service (up to 255 letters, numbers, hyphens, and underscores)
    willReplaceOnChanges: true
  networkConfiguration:
    $ref: "#/types/aws:ecs/ServiceNetworkConfiguration:ServiceNetworkConfiguration"
    description: |
      Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
  orderedPlacementStrategies:
    type: array
    items:
      $ref: "#/types/aws:ecs/ServiceOrderedPlacementStrategy:ServiceOrderedPlacementStrategy"
    description: |
      Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `force_new_deployment` is enabled. The maximum number of `ordered_placement_strategy` blocks is `5`. See below.
  placementConstraints:
    type: array
    items:
      $ref: "#/types/aws:ecs/ServicePlacementConstraint:ServicePlacementConstraint"
    description: |
      Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `force_new_deployment` is enabled. Maximum number of `placement_constraints` is `10`. See below.
  platformVersion:
    type: string
    description: |
      Platform version on which to run your service. Only applicable for `launch_type` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
  propagateTags:
    type: string
    description: |
      Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
  schedulingStrategy:
    type: string
    description: |
      Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
    willReplaceOnChanges: true
  serviceRegistries:
    $ref: "#/types/aws:ecs/ServiceServiceRegistries:ServiceServiceRegistries"
    description: |
      Service discovery registries for the service. The maximum number of `service_registries` blocks is `1`. See below.
  tags:
    type: object
    additionalProperties:
      type: string
    description: |
      Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
  taskDefinition:
    type: string
    description: |
      Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
  waitForSteadyState:
    type: boolean
    description: |
      If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
stateInputs:
  description: |
    Input properties used for looking up and filtering Service resources.
  properties:
    capacityProviderStrategies:
      type: array
      items:
        $ref: "#/types/aws:ecs/ServiceCapacityProviderStrategy:ServiceCapacityProviderStrategy"
      description: |
        Capacity provider strategies to use for the service. Can be one or more. These can be updated without destroying and recreating the service only if `force_new_deployment = true` and not changing from 0 `capacity_provider_strategy` blocks to greater than 0, or vice versa. See below.
    cluster:
      type: string
      description: |
        ARN of an ECS cluster.
      willReplaceOnChanges: true
    deploymentCircuitBreaker:
      $ref: "#/types/aws:ecs/ServiceDeploymentCircuitBreaker:ServiceDeploymentCircuitBreaker"
      description: |
        Configuration block for deployment circuit breaker. See below.
    deploymentController:
      $ref: "#/types/aws:ecs/ServiceDeploymentController:ServiceDeploymentController"
      description: |
        Configuration block for deployment controller configuration. See below.
    deploymentMaximumPercent:
      type: integer
      description: |
        Upper limit (as a percentage of the service's desiredCount) of the number of running tasks that can be running in a service during a deployment. Not valid when using the `DAEMON` scheduling strategy.
    deploymentMinimumHealthyPercent:
      type: integer
      description: |
        Lower limit (as a percentage of the service's desiredCount) of the number of running tasks that must remain running and healthy in a service during a deployment.
    desiredCount:
      type: integer
      description: |
        Number of instances of the task definition to place and keep running. Defaults to 0. Do not specify if using the `DAEMON` scheduling strategy.
    enableEcsManagedTags:
      type: boolean
      description: |
        Specifies whether to enable Amazon ECS managed tags for the tasks within the service.
    enableExecuteCommand:
      type: boolean
      description: |
        Specifies whether to enable Amazon ECS Exec for the tasks within the service.
    forceNewDeployment:
      type: boolean
      description: |
        Enable to force a new task deployment of the service. This can be used to update tasks to use a newer Docker image with same image/tag combination (e.g., `myimage:latest`), roll Fargate tasks onto a newer platform version, or immediately deploy `ordered_placement_strategy` and `placement_constraints` updates.
    healthCheckGracePeriodSeconds:
      type: integer
      description: |
        Seconds to ignore failing load balancer health checks on newly instantiated tasks to prevent premature shutdown, up to 2147483647. Only valid for services configured to use load balancers.
    iamRole:
      type: string
      description: |
        ARN of the IAM role that allows Amazon ECS to make calls to your load balancer on your behalf. This parameter is required if you are using a load balancer with your service, but only if your task definition does not use the `awsvpc` network mode. If using `awsvpc` network mode, do not specify this role. If your account has already created the Amazon ECS service-linked role, that role is used by default for your service unless you specify a role here.
      willReplaceOnChanges: true
    launchType:
      type: string
      description: |
        Launch type on which to run your service. The valid values are `EC2`, `FARGATE`, and `EXTERNAL`. Defaults to `EC2`.
      willReplaceOnChanges: true
    loadBalancers:
      type: array
      items:
        $ref: "#/types/aws:ecs/ServiceLoadBalancer:ServiceLoadBalancer"
      description: |
        Configuration block for load balancers. See below.
    name:
      type: string
      description: |
        Name of the service (up to 255 letters, numbers, hyphens, and underscores)
      willReplaceOnChanges: true
    networkConfiguration:
      $ref: "#/types/aws:ecs/ServiceNetworkConfiguration:ServiceNetworkConfiguration"
      description: |
        Network configuration for the service. This parameter is required for task definitions that use the `awsvpc` network mode to receive their own Elastic Network Interface, and it is not supported for other network modes. See below.
    orderedPlacementStrategies:
      type: array
      items:
        $ref: "#/types/aws:ecs/ServiceOrderedPlacementStrategy:ServiceOrderedPlacementStrategy"
      description: |
        Service level strategy rules that are taken into consideration during task placement. List from top to bottom in order of precedence. Updates to this configuration will take effect next task deployment unless `force_new_deployment` is enabled. The maximum number of `ordered_placement_strategy` blocks is `5`. See below.
    placementConstraints:
      type: array
      items:
        $ref: "#/types/aws:ecs/ServicePlacementConstraint:ServicePlacementConstraint"
      description: |
        Rules that are taken into consideration during task placement. Updates to this configuration will take effect next task deployment unless `force_new_deployment` is enabled. Maximum number of `placement_constraints` is `10`. See below.
    platformVersion:
      type: string
      description: |
        Platform version on which to run your service. Only applicable for `launch_type` set to `FARGATE`. Defaults to `LATEST`. More information about Fargate platform versions can be found in the [AWS ECS User Guide](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/platform_versions.html).
    propagateTags:
      type: string
      description: |
        Specifies whether to propagate the tags from the task definition or the service to the tasks. The valid values are `SERVICE` and `TASK_DEFINITION`.
    schedulingStrategy:
      type: string
      description: |
        Scheduling strategy to use for the service. The valid values are `REPLICA` and `DAEMON`. Defaults to `REPLICA`. Note that [*Tasks using the Fargate launch type or the `CODE_DEPLOY` or `EXTERNAL` deployment controller types don't support the `DAEMON` scheduling strategy*](https://docs.aws.amazon.com/AmazonECS/latest/APIReference/API_CreateService.html).
      willReplaceOnChanges: true
    serviceRegistries:
      $ref: "#/types/aws:ecs/ServiceServiceRegistries:ServiceServiceRegistries"
      description: |
        Service discovery registries for the service. The maximum number of `service_registries` blocks is `1`. See below.
    tags:
      type: object
      additionalProperties:
        type: string
      description: |
        Key-value map of resource tags. If configured with a provider `default_tags` configuration block present, tags with matching keys will overwrite those defined at the provider-level.
    tagsAll:
      type: object
      additionalProperties:
        type: string
      description: |
        A map of tags assigned to the resource, including those inherited from the provider `default_tags` configuration block.
    taskDefinition:
      type: string
      description: |
        Family and revision (`family:revision`) or full ARN of the task definition that you want to run in your service. Required unless using the `EXTERNAL` deployment controller. If a revision is not specified, the latest `ACTIVE` revision is used.
    waitForSteadyState:
      type: boolean
      description: |
        If `true`, this provider will wait for the service to reach a steady state (like [`aws ecs wait services-stable`](https://docs.aws.amazon.com/cli/latest/reference/ecs/wait/services-stable.html)) before continuing. Default `false`.
  type: object
