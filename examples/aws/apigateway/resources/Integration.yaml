$token: aws:apigateway/integration:Integration
properties:
  cacheKeyParameters:
    type: array
    items:
      type: string
    description: |
      List of cache key parameters for the integration.
  cacheNamespace:
    type: string
    description: |
      Integration's cache namespace.
  connectionId:
    type: string
    description: |
      ID of the VpcLink used for the integration. **Required** if `connection_type` is `VPC_LINK`
  connectionType:
    type: string
    description: |
      Integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
  contentHandling:
    type: string
    description: |
      How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
  credentials:
    type: string
    description: |
      Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
  httpMethod:
    type: string
    description: |
      HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
      when calling the associated resource.
  integrationHttpMethod:
    type: string
    description: |
      Integration HTTP method
      (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
      **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
      Not all methods are compatible with all `AWS` integrations.
      e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
  passthroughBehavior:
    type: string
    description: |
      Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `request_templates` is used.
  requestParameters:
    type: object
    additionalProperties:
      type: string
    description: |
      Map of request query string parameters and headers that should be passed to the backend responder.
      For example: `request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
  requestTemplates:
    type: object
    additionalProperties:
      type: string
    description: |
      Map of the integration's request templates.
  resourceId:
    type: string
    description: |
      API resource ID.
  restApi:
    type: string
    description: |
      ID of the associated REST API.
  timeoutMilliseconds:
    type: integer
    description: |
      Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
  tlsConfig:
    $ref: "#/types/aws:apigateway/IntegrationTlsConfig:IntegrationTlsConfig"
    description: |
      TLS configuration. See below.
  type:
    type: string
    description: |
      Integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connection_type` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
  uri:
    type: string
    description: |
      Input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
      For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
      e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
required:
  - cacheNamespace
  - httpMethod
  - passthroughBehavior
  - resourceId
  - restApi
  - type
inputProperties:
  cacheKeyParameters:
    type: array
    items:
      type: string
    description: |
      List of cache key parameters for the integration.
  cacheNamespace:
    type: string
    description: |
      Integration's cache namespace.
  connectionId:
    type: string
    description: |
      ID of the VpcLink used for the integration. **Required** if `connection_type` is `VPC_LINK`
  connectionType:
    type: string
    description: |
      Integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
  contentHandling:
    type: string
    description: |
      How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
  credentials:
    type: string
    description: |
      Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
    willReplaceOnChanges: true
  httpMethod:
    type: string
    description: |
      HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
      when calling the associated resource.
    willReplaceOnChanges: true
  integrationHttpMethod:
    type: string
    description: |
      Integration HTTP method
      (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
      **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
      Not all methods are compatible with all `AWS` integrations.
      e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
    willReplaceOnChanges: true
  passthroughBehavior:
    type: string
    description: |
      Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `request_templates` is used.
    willReplaceOnChanges: true
  requestParameters:
    type: object
    additionalProperties:
      type: string
    description: |
      Map of request query string parameters and headers that should be passed to the backend responder.
      For example: `request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
  requestTemplates:
    type: object
    additionalProperties:
      type: string
    description: |
      Map of the integration's request templates.
  resourceId:
    type: string
    description: |
      API resource ID.
    willReplaceOnChanges: true
  restApi:
    type: string
    oneOf:
      - type: string
      - type: string
        $ref: "#/types/aws:apigateway/restApi:RestApi"
    description: |
      ID of the associated REST API.
    willReplaceOnChanges: true
  timeoutMilliseconds:
    type: integer
    description: |
      Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
  tlsConfig:
    $ref: "#/types/aws:apigateway/IntegrationTlsConfig:IntegrationTlsConfig"
    description: |
      TLS configuration. See below.
  type:
    type: string
    description: |
      Integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connection_type` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
    willReplaceOnChanges: true
  uri:
    type: string
    description: |
      Input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
      For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
      e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
requiredInputs:
  - httpMethod
  - resourceId
  - restApi
  - type
stateInputs:
  description: |
    Input properties used for looking up and filtering Integration resources.
  properties:
    cacheKeyParameters:
      type: array
      items:
        type: string
      description: |
        List of cache key parameters for the integration.
    cacheNamespace:
      type: string
      description: |
        Integration's cache namespace.
    connectionId:
      type: string
      description: |
        ID of the VpcLink used for the integration. **Required** if `connection_type` is `VPC_LINK`
    connectionType:
      type: string
      description: |
        Integration input's [connectionType](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/#connectionType). Valid values are `INTERNET` (default for connections through the public routable internet), and `VPC_LINK` (for private connections between API Gateway and a network load balancer in a VPC).
    contentHandling:
      type: string
      description: |
        How to handle request payload content type conversions. Supported values are `CONVERT_TO_BINARY` and `CONVERT_TO_TEXT`. If this property is not defined, the request payload will be passed through from the method request to integration request without modification, provided that the passthroughBehaviors is configured to support payload pass-through.
    credentials:
      type: string
      description: |
        Credentials required for the integration. For `AWS` integrations, 2 options are available. To specify an IAM Role for Amazon API Gateway to assume, use the role's ARN. To require that the caller's identity be passed through from the request, specify the string `arn:aws:iam::\*:user/\*`.
      willReplaceOnChanges: true
    httpMethod:
      type: string
      description: |
        HTTP method (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTION`, `ANY`)
        when calling the associated resource.
      willReplaceOnChanges: true
    integrationHttpMethod:
      type: string
      description: |
        Integration HTTP method
        (`GET`, `POST`, `PUT`, `DELETE`, `HEAD`, `OPTIONs`, `ANY`, `PATCH`) specifying how API Gateway will interact with the back end.
        **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
        Not all methods are compatible with all `AWS` integrations.
        e.g., Lambda function [can only be invoked](https://github.com/awslabs/aws-apigateway-importer/issues/9#issuecomment-129651005) via `POST`.
      willReplaceOnChanges: true
    passthroughBehavior:
      type: string
      description: |
        Integration passthrough behavior (`WHEN_NO_MATCH`, `WHEN_NO_TEMPLATES`, `NEVER`).  **Required** if `request_templates` is used.
      willReplaceOnChanges: true
    requestParameters:
      type: object
      additionalProperties:
        type: string
      description: |
        Map of request query string parameters and headers that should be passed to the backend responder.
        For example: `request_parameters = { "integration.request.header.X-Some-Other-Header" = "method.request.header.X-Some-Header" }`
    requestTemplates:
      type: object
      additionalProperties:
        type: string
      description: |
        Map of the integration's request templates.
    resourceId:
      type: string
      description: |
        API resource ID.
      willReplaceOnChanges: true
    restApi:
      type: string
      oneOf:
        - type: string
        - type: string
          $ref: "#/types/aws:apigateway/restApi:RestApi"
      description: |
        ID of the associated REST API.
      willReplaceOnChanges: true
    timeoutMilliseconds:
      type: integer
      description: |
        Custom timeout between 50 and 29,000 milliseconds. The default value is 29,000 milliseconds.
    tlsConfig:
      $ref: "#/types/aws:apigateway/IntegrationTlsConfig:IntegrationTlsConfig"
      description: |
        TLS configuration. See below.
    type:
      type: string
      description: |
        Integration input's [type](https://docs.aws.amazon.com/apigateway/api-reference/resource/integration/). Valid values are `HTTP` (for HTTP backends), `MOCK` (not calling any real backend), `AWS` (for AWS services), `AWS_PROXY` (for Lambda proxy integration) and `HTTP_PROXY` (for HTTP proxy integration). An `HTTP` or `HTTP_PROXY` integration with a `connection_type` of `VPC_LINK` is referred to as a private integration and uses a VpcLink to connect API Gateway to a network load balancer of a VPC.
      willReplaceOnChanges: true
    uri:
      type: string
      description: |
        Input's URI. **Required** if `type` is `AWS`, `AWS_PROXY`, `HTTP` or `HTTP_PROXY`.
        For HTTP integrations, the URI must be a fully formed, encoded HTTP(S) URL according to the RFC-3986 specification . For AWS integrations, the URI should be of the form `arn:aws:apigateway:{region}:{subdomain.service|service}:{path|action}/{service_api}`. `region`, `subdomain` and `service` are used to determine the right endpoint.
        e.g., `arn:aws:apigateway:eu-west-1:lambda:path/2015-03-31/functions/arn:aws:lambda:eu-west-1:012345678901:function:my-func/invocations`. For private integrations, the URI parameter is not used for routing requests to your endpoint, but is used for setting the Host header and for certificate validation.
  type: object
