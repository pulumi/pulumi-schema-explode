$token: azure-native:machinelearningservices/v20220201preview:ImageModelSettingsObjectDetectionResponse
description: "Settings used for training the model.\r

  For more information on the available settings please visit the official documentation:\r

  https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models."
properties:
  advancedSettings:
    type: string
    description: Settings for advanced scenarios.
  amsGradient:
    type: boolean
    description: Enable AMSGrad when optimizer is 'adam' or 'adamw'.
  augmentations:
    type: string
    description: Settings for using Augmentations.
  beta1:
    type: number
    description: Value of 'beta1' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
  beta2:
    type: number
    description: Value of 'beta2' when optimizer is 'adam' or 'adamw'. Must be a float in the range [0, 1].
  boxDetectionsPerImage:
    type: integer
    description: "Maximum number of detections per image, for all classes. Must be a positive integer.\r

      Note: This settings is not supported for the 'yolov5' algorithm."
  boxScoreThreshold:
    type: number
    description: "During inference, only return proposals with a classification score greater than\r

      BoxScoreThreshold. Must be a float in the range[0, 1]."
  checkpointDatasetId:
    type: string
    description: "FileDataset id for pretrained checkpoint(s) for incremental training.\r

      Make sure to pass CheckpointFilename along with CheckpointDatasetId."
  checkpointFilename:
    type: string
    description: "The pretrained checkpoint filename in FileDataset for incremental training.\r

      Make sure to pass CheckpointDatasetId along with CheckpointFilename."
  checkpointFrequency:
    type: integer
    description: Frequency to store model checkpoints. Must be a positive integer.
  checkpointRunId:
    type: string
    description: The id of a previous run that has a pretrained checkpoint for incremental training.
  distributed:
    type: boolean
    description: Whether to use distributed training.
  earlyStopping:
    type: boolean
    description: Enable early stopping logic during training.
  earlyStoppingDelay:
    type: integer
    description: "Minimum number of epochs or validation evaluations to wait before primary metric improvement\r

      is tracked for early stopping. Must be a positive integer."
  earlyStoppingPatience:
    type: integer
    description: "Minimum number of epochs or validation evaluations with no primary metric improvement before\r

      the run is stopped. Must be a positive integer."
  enableOnnxNormalization:
    type: boolean
    description: Enable normalization when exporting ONNX model.
  evaluationFrequency:
    type: integer
    description: Frequency to evaluate validation dataset to get metric scores. Must be a positive integer.
  gradientAccumulationStep:
    type: integer
    description: "Gradient accumulation means running a configured number of \"GradAccumulationStep\" steps without\r

      updating the model weights while accumulating the gradients of those steps, and then using\r

      the accumulated gradients to compute the weight updates. Must be a positive integer."
  imageSize:
    type: integer
    description: "Image size for train and validation. Must be a positive integer.\r

      Note: The training run may get into CUDA OOM if the size is too big.\r

      Note: This settings is only supported for the 'yolov5' algorithm."
  layersToFreeze:
    type: integer
    description: "Number of layers to freeze for the model. Must be a positive integer.\r

      For instance, passing 2 as value for 'seresnext' means\r

      freezing layer0 and layer1. For a full list of models supported and details on layer freeze, please\r

      see: https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models."
  learningRate:
    type: number
    description: Initial learning rate. Must be a float in the range [0, 1].
  learningRateScheduler:
    type: string
    description: Type of learning rate scheduler. Must be 'warmup_cosine' or 'step'.
    default: None
  maxSize:
    type: integer
    description: "Maximum size of the image to be rescaled before feeding it to the backbone.\r

      Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.\r

      Note: This settings is not supported for the 'yolov5' algorithm."
  minSize:
    type: integer
    description: "Minimum size of the image to be rescaled before feeding it to the backbone.\r

      Must be a positive integer. Note: training run may get into CUDA OOM if the size is too big.\r

      Note: This settings is not supported for the 'yolov5' algorithm."
  modelName:
    type: string
    description: "Name of the model to use for training.\r

      For more information on the available models please visit the official documentation:\r

      https://docs.microsoft.com/en-us/azure/machine-learning/how-to-auto-train-image-models."
  modelSize:
    type: string
    description: "Model size. Must be 'small', 'medium', 'large', or 'xlarge'.\r

      Note: training run may get into CUDA OOM if the model size is too big.\r

      Note: This settings is only supported for the 'yolov5' algorithm."
    default: None
  momentum:
    type: number
    description: Value of momentum when optimizer is 'sgd'. Must be a float in the range [0, 1].
  multiScale:
    type: boolean
    description: "Enable multi-scale image by varying image size by +/- 50%.\r

      Note: training run may get into CUDA OOM if no sufficient GPU memory.\r

      Note: This settings is only supported for the 'yolov5' algorithm."
  nesterov:
    type: boolean
    description: Enable nesterov when optimizer is 'sgd'.
  nmsIouThreshold:
    type: number
    description: IOU threshold used during inference in NMS post processing. Must be a float in the range [0, 1].
  numberOfEpochs:
    type: integer
    description: Number of training epochs. Must be a positive integer.
  numberOfWorkers:
    type: integer
    description: Number of data loader workers. Must be a non-negative integer.
  optimizer:
    type: string
    description: Type of optimizer.
    default: None
  randomSeed:
    type: integer
    description: Random seed to be used when using deterministic training.
  splitRatio:
    type: number
    description: "If validation data is not defined, this specifies the split ratio for splitting\r

      train data into random train and validation subsets. Must be a float in the range [0, 1]."
  stepLRGamma:
    type: number
    description: Value of gamma when learning rate scheduler is 'step'. Must be a float in the range [0, 1].
  stepLRStepSize:
    type: integer
    description: Value of step size when learning rate scheduler is 'step'. Must be a positive integer.
  tileGridSize:
    type: string
    description: "The grid size to use for tiling each image. Note: TileGridSize must not be\r

      None to enable small object detection logic. A string containing two integers in mxn format.\r

      Note: This settings is not supported for the 'yolov5' algorithm."
  tileOverlapRatio:
    type: number
    description: "Overlap ratio between adjacent tiles in each dimension. Must be float in the range [0, 1).\r

      Note: This settings is not supported for the 'yolov5' algorithm."
  tilePredictionsNmsThreshold:
    type: number
    description: "The IOU threshold to use to perform NMS while merging predictions from tiles and image.\r

      Used in validation/ inference. Must be float in the range [0, 1].\r

      Note: This settings is not supported for the 'yolov5' algorithm."
  trainingBatchSize:
    type: integer
    description: Training batch size. Must be a positive integer.
  validationBatchSize:
    type: integer
    description: Validation batch size. Must be a positive integer.
  validationIouThreshold:
    type: number
    description: IOU threshold to use when computing validation metric. Must be float in the range [0, 1].
  validationMetricType:
    type: string
    description: Metric computation method to use for validation metrics.
    default: None
  warmupCosineLRCycles:
    type: number
    description: Value of cosine cycle when learning rate scheduler is 'warmup_cosine'. Must be a float in the range [0, 1].
  warmupCosineLRWarmupEpochs:
    type: integer
    description: Value of warmup epochs when learning rate scheduler is 'warmup_cosine'. Must be a positive integer.
  weightDecay:
    type: number
    description: Value of weight decay when optimizer is 'sgd', 'adam', or 'adamw'. Must be a float in the range[0, 1].
type: object
